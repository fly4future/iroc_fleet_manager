<launch>

  <!-- defines name of the namespace -->
  <arg name="GS_NS" default="$(optenv GS_NS gs)" />

  <arg name="custom_config" default="" />
  <!-- config files -->
  <arg name="network_config" default="$(optenv NETWORK_CONFIG)" />

  <!-- will it run using GNU debugger? -->
  <arg name="DEBUG" default="false" />
  <arg unless="$(arg DEBUG)" name="launch_prefix_debug" value=""/>
  <arg     if="$(arg DEBUG)" name="launch_prefix_debug" value="debug_roslaunch"/>

  <!-- will it run as standalone nodelet or using a nodelet manager? -->
  <arg name="standalone" default="true" />
  <arg name="manager" default="$(arg GS_NS)_iroc_fleet_manager_manager" />
  <arg unless="$(arg standalone)" name="nodelet" value="load"/>
  <arg     if="$(arg standalone)" name="nodelet" value="standalone"/>
  <arg unless="$(arg standalone)" name="nodelet_manager" value="$(arg manager)"/>
  <arg     if="$(arg standalone)" name="nodelet_manager" value=""/>

  <group ns="$(arg GS_NS)">

    <!-- IROCFleetManager nodelet -->
    <node pkg="nodelet" type="nodelet" name="iroc_fleet_manager" args="$(arg nodelet) iroc_fleet_manager/FleetManager $(arg nodelet_manager)" launch-prefix="$(arg launch_prefix_debug)" output="screen">

      <param name="config" value="$(find iroc_fleet_manager)/config/config.yaml" />
      <rosparam file="$(find iroc_fleet_manager)/config/plugin_manager.yaml" />
      <rosparam file="$(find iroc_fleet_manager)/config/plugins.yaml" />

      <param if="$(eval arg('network_config') == '')" name="network_config" value="" />
      <param if="$(eval not arg('network_config') == '' and arg('network_config')[0] == '/')" name="network_config" value="$(arg network_config)" />
      <param if="$(eval not arg('network_config') == '' and not arg('network_config')[0] == '/')" name="network_config" value="$(env PWD)/$(arg network_config)" />

      <param if="$(eval arg('custom_config') == '')" name="custom_config" value="" />
      <param if="$(eval not arg('custom_config') == '' and arg('custom_config')[0] == '/')" name="custom_config" value="$(arg custom_config)" />
      <param if="$(eval not arg('custom_config') == '' and not arg('custom_config')[0] == '/')" name="custom_config" value="$(env PWD)/$(arg custom_config)" />

      <!-- Subscribers -->
      <remap from="~in/general_robot_info" to="/state_monitor/general_robot_info" />
      <remap from="~in/state_estimation_info" to="/state_monitor/state_estimation_info" />
      <remap from="~in/control_info" to="/state_monitor/control_info" />
      <remap from="~in/collision_avoidance_info" to="/state_monitor/collision_avoidance_info" />
      <remap from="~in/uav_info" to="/state_monitor/uav_info" />
      <remap from="~in/system_health_info" to="/state_monitor/system_health_info" />

      <!-- Service clients -->
      <remap from="~svc/mission_activation" to="/mission_handler/mission_activation" />
      <remap from="~svc/mission_pausing" to="/mission_handler/mission_pausing" />
      <!-- Service servers -->
      <remap from="~svc/change_fleet_mission_state" to="~change_fleet_mission_state" />
      <remap from="~svc/change_robot_mission_state" to="~change_robot_mission_state" />
      <!-- Action client -->
      <remap from="~ac/waypoint_mission" to="/mission_handler" />

    </node>

  </group>

</launch>
